from django.core.exceptions import ValidationError
from django.db import models
from django.utils.text import slugify



class OurService(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    photo = models.ImageField("–§–æ—Ç–æ", upload_to='service_photos/', blank=True, null=True)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)

    class Meta:
        verbose_name = "üõ†Ô∏è –ù–∞—à —Å–µ—Ä–≤–∏—Å"
        verbose_name_plural = "üõ†Ô∏è –ù–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã"
        ordering = ['name']

    def __str__(self):
        return self.name

class ServicePhoto(models.Model):
    service = models.ForeignKey(OurService, related_name='photos', on_delete=models.CASCADE)
    image = models.ImageField("–§–æ—Ç–æ", upload_to='service_photos/')




class ItemObject(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    description_more = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", null=True, blank=True)
    phone1 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 1", max_length=25)
    phone2 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 2", max_length=25, blank=True, null=True)

    # –°–≤—è–∑—å —Å —Å–µ—Ä–≤–∏—Å–æ–º (–∫–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É)
    service = models.ForeignKey(
        OurService,
        on_delete=models.SET_NULL,  # –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª–µ —Å—Ç–∞–Ω–µ—Ç NULL
        null=True,
        blank=True,
        related_name='items',
        verbose_name="–°–µ—Ä–≤–∏—Å"
    )

    # –ù–æ–≤—ã–µ –±—É–ª–µ–≤—ã–µ –ø–æ–ª—è (–≥–∞–ª–æ—á–∫–∏)
    is_metal_structures = models.BooleanField("–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", default=False)
    is_prokladki_mtgr = models.BooleanField("–ü—Ä–æ–∫–ª–∞–¥–∫–∏", default=False)
    is_steps_and_stairs = models.BooleanField("–°—Ç—É–ø–µ–Ω—å–∫–∏ –∏ –õ–µ—Å—Ç–Ω–∏—Ü—ã", default=False)
    is_grills = models.BooleanField("–ú–∞–Ω–≥–∞–ª—ã", default=False)
    is_decor_elements = models.BooleanField("–≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ–∫–æ—Ä–∞", default=False)
    is_main = models.BooleanField("–ù–∞ –≥–ª–∞–≤–Ω—É—é", default=False)

    class Meta:
        verbose_name = "üé∑ –ò–∑–¥–µ–ª–∏—è"
        verbose_name_plural = "üé∑ –ò–∑–¥–µ–ª–∏—è"
        ordering = ['name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
        if not self.slug:
            base_slug = slugify(self.name)
            slug = base_slug
            counter = 1
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug –≤ –±–∞–∑–µ
            while ItemObject.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = slug
        super().save(*args, **kwargs)


class ItemPhoto(models.Model):
    contact_object = models.ForeignKey(
        ItemObject,
        on_delete=models.CASCADE,
        related_name='photos',
        verbose_name="–û–±—ä–µ–∫—Ç –∏–∑–¥–µ–ª–∏—è"
    )
    photo = models.ImageField("–§–æ—Ç–æ", upload_to='contact_photos/')
    description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ", max_length=255, blank=True)

    class Meta:
        verbose_name = "üñºÔ∏è –§–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è"
        verbose_name_plural = "üñºÔ∏è –§–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è"

    def __str__(self):
        return f"–§–æ—Ç–æ –¥–ª—è {self.contact_object.name} ({self.description[:20]})"

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ contact_object —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏–º–µ–µ—Ç pk
        if self.contact_object and self.contact_object.pk:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º 8 —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä–µ–∫—Ç
            if self.contact_object.photos.exclude(pk=self.pk).count() >= 8:
                raise ValidationError("–ú–∞–∫—Å–∏–º—É–º 8 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.")



class Banner(models.Model):
    name = models.CharField("–ò–º—è", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    phone1 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 1", max_length=20, blank=True)
    phone2 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 2", max_length=20, blank=True)

    photo1 = models.ImageField("–§–æ—Ç–æ 1", upload_to='banners/', blank=True, null=True)
    photo1_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 1", max_length=255, blank=True)

    photo2 = models.ImageField("–§–æ—Ç–æ 2", upload_to='banners/', blank=True, null=True)
    photo2_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 2", max_length=255, blank=True)

    photo3 = models.ImageField("–§–æ—Ç–æ 3", upload_to='banners/', blank=True, null=True)
    photo3_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 3", max_length=255, blank=True)

    photo4 = models.ImageField("–§–æ—Ç–æ 4", upload_to='banners/', blank=True, null=True)
    photo4_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 4", max_length=255, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "üåÑ –ë–∞–Ω–Ω–µ—Ä"
        verbose_name_plural = "üåÑ –ë–∞–Ω–Ω–µ—Ä—ã"


class HadContact(models.Model):
    name = models.CharField("–ò–º—è", max_length=100)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20)
    email = models.EmailField("–ü–æ—á—Ç–∞", max_length=254)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–®–∞–ø–∫–∞ - üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏ üìß –ü–æ—á—Ç–∞"
        verbose_name_plural = "–®–∞–ø–∫–∞ - üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏ üìß –ü–æ—á—Ç–∞"


class ServicesContact(models.Model):
    name = models.CharField("–ò–º—è", max_length=100)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    phone_one = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω1", max_length=20)
    phone_two = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω2", max_length=20)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–£—Å–ª—É–≥–∏ üë∑üèª‚Äç‚ôÇÔ∏è –≤ –ë–æ–ª–∫–µ –§–æ—Ä–º—ã - üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã"
        verbose_name_plural = "–£—Å–ª—É–≥–∏ üë∑üèª‚Äç‚ôÇÔ∏è –≤ –ë–æ–ª–∫–µ –§–æ—Ä–º—ã - üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã"


class FooterInfo(models.Model):
    address = models.CharField("–ê–¥—Ä–µ—Å", max_length=255)
    phone_one = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 1", max_length=20)
    phone_two = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 2", max_length=20, blank=True)
    email = models.EmailField("–ü–æ—á—Ç–∞", max_length=254, default='aironmaster@tut.by')

    def __str__(self):
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ñ—É—Ç–µ—Ä–∞"

    class Meta:
        verbose_name = "üöß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ—É—Ç–µ—Ä–∞"
        verbose_name_plural = "üöß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ—É—Ç–µ—Ä–∞"


class SocialNetwork(models.Model):
    footer_info = models.ForeignKey(
        FooterInfo,
        on_delete=models.CASCADE,
        related_name='social_networks',
        verbose_name="–§—É—Ç–µ—Ä"
    )
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏", max_length=50)
    url = models.URLField("–°—Å—ã–ª–∫–∞", blank=True)
    icon = models.ImageField("–ò–∫–æ–Ω–∫–∞", upload_to='social_icons/', blank=True, null=True)

    class Meta:
        verbose_name = "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"
        verbose_name_plural = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"

    def __str__(self):
        return self.name



class About(models.Model):
    name = models.CharField("–ò–º—è", max_length=100)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    photo = models.ImageField("–§–æ—Ç–æ", upload_to='about_photos/', blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"


# class FinishedProduct(models.Model):
#     name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
#     description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
#     photo = models.ImageField("–§–æ—Ç–æ", upload_to='finished_products/', blank=True, null=True)
#
#     class Meta:
#         verbose_name = "‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"
#         verbose_name_plural = "‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"
#         ordering = ['name']
#
#     def __str__(self):
#         return self.name


class BannerPage(models.Model):
    CATEGORY_CHOICES = [
        ('metal_structures', '–ú–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
        ('procladki', '–ü—Ä–æ–∫–ª–∞–¥–∫–∏'),
        ('steps_and_stairs', '–°—Ç—É–ø–µ–Ω—å–∫–∏ –∏ –õ–µ—Å—Ç–Ω–∏—Ü—ã'),
        ('grills', '–ú–∞–Ω–≥–∞–ª—ã'),
        ('decor_elements', '–≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ–∫–æ—Ä–∞'),
    ]

    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    image = models.ImageField("–§–æ—Ç–æ", upload_to='banners/')
    category = models.CharField("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", max_length=50, choices=CATEGORY_CHOICES, unique=True)

    class Meta:
        verbose_name = "‚õµ –ë–∞–Ω–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        verbose_name_plural = "‚õµ –ë–∞–Ω–Ω–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü"
        ordering = ['name']

    def __str__(self):
        return f"{self.get_category_display()} - {self.name}"
