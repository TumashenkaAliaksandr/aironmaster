from django.db import models
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.text import slugify


class ItemObject(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    phone1 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 1", max_length=25)
    phone2 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 2", max_length=25, blank=True, null=True)

    class Meta:
        verbose_name = "–ò–∑–¥–µ–ª–∏—è"
        verbose_name_plural = "–ò–∑–¥–µ–ª–∏—è"
        ordering = ['name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
        if not self.slug:
            base_slug = slugify(self.name)
            slug = base_slug
            counter = 1
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug –≤ –±–∞–∑–µ
            while ItemObject.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = slug
        super().save(*args, **kwargs)




class ItemPhoto(models.Model):
    contact_object = models.ForeignKey(
        ItemObject,
        on_delete=models.CASCADE,
        related_name='photos',
        verbose_name="–û–±—ä–µ–∫—Ç –∏–∑–¥–µ–ª–∏—è"
    )
    photo = models.ImageField("–§–æ—Ç–æ", upload_to='contact_photos/')
    description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ", max_length=255, blank=True)

    class Meta:
        verbose_name = "–§–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è"
        verbose_name_plural = "–§–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è"

    def __str__(self):
        return f"–§–æ—Ç–æ –¥–ª—è {self.contact_object.name} ({self.description[:20]})"

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ contact_object —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏–º–µ–µ—Ç pk
        if self.contact_object and self.contact_object.pk:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º 8 —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä–µ–∫—Ç
            if self.contact_object.photos.exclude(pk=self.pk).count() >= 8:
                raise ValidationError("–ú–∞–∫—Å–∏–º—É–º 8 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.")



class Banner(models.Model):
    name = models.CharField("–ò–º—è", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    phone1 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 1", max_length=20, blank=True)
    phone2 = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω 2", max_length=20, blank=True)

    photo1 = models.ImageField("–§–æ—Ç–æ 1", upload_to='banners/', blank=True, null=True)
    photo1_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 1", max_length=255, blank=True)

    photo2 = models.ImageField("–§–æ—Ç–æ 2", upload_to='banners/', blank=True, null=True)
    photo2_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 2", max_length=255, blank=True)

    photo3 = models.ImageField("–§–æ—Ç–æ 3", upload_to='banners/', blank=True, null=True)
    photo3_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 3", max_length=255, blank=True)

    photo4 = models.ImageField("–§–æ—Ç–æ 4", upload_to='banners/', blank=True, null=True)
    photo4_description = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ 4", max_length=255, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ë–∞–Ω–Ω–µ—Ä"
        verbose_name_plural = "–ë–∞–Ω–Ω–µ—Ä—ã"


class HadContact(models.Model):
    name = models.CharField("–ò–º—è", max_length=100)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20)
    email = models.EmailField("–ü–æ—á—Ç–∞", max_length=254)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–®–∞–ø–∫–∞ - üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏ üìß –ü–æ—á—Ç–∞"
        verbose_name_plural = "–®–∞–ø–∫–∞ - üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏ üìß –ü–æ—á—Ç–∞"
